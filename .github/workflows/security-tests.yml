# Security Testing Workflow for SIM-ONE Framework MCP Server
# Runs comprehensive security tests on all pull requests and pushes

name: Security Tests

on:
  push:
    branches: [ main, genspark_ai_developer ]
  pull_request:
    branches: [ main ]

jobs:
  security-scan:
    runs-on: ubuntu-latest
    name: Security Vulnerability Scanning
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        cd code
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install bandit safety pytest
    
    - name: Run Bandit security linter
      run: |
        cd code
        bandit -r mcp_server/ -f json -o bandit-report.json || true
        bandit -r mcp_server/ --severity-level medium --confidence-level medium
    
    - name: Check for known vulnerabilities
      run: |
        cd code
        safety check --json --output safety-report.json || true
        safety check
    
    - name: Upload security reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-reports
        path: |
          code/bandit-report.json
          code/safety-report.json

  security-tests:
    runs-on: ubuntu-latest
    name: Security Test Suite
    needs: security-scan
    
    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        cd code
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov
    
    - name: Set up test environment
      run: |
        cd code
        cp mcp_server/.env.example mcp_server/.env
        echo "REDIS_HOST=localhost" >> mcp_server/.env
        echo "VALID_API_KEYS=test-admin-key,test-user-key,test-readonly-key" >> mcp_server/.env
        echo "ALLOWED_ORIGINS=http://localhost:3000,http://127.0.0.1:3000" >> mcp_server/.env
    
    - name: Initialize database
      run: |
        cd code
        python -c "from mcp_server.database.memory_database import get_db_connection; print('Database accessible:', get_db_connection() is not None)"
    
    - name: Run security test suite
      run: |
        cd code
        python -m unittest discover mcp_server/tests/security/ -v
    
    - name: Run core application tests
      run: |
        cd code
        python -m unittest discover mcp_server/tests/ -v
    
    - name: Generate test coverage report
      run: |
        cd code
        python -m pytest mcp_server/tests/ --cov=mcp_server --cov-report=xml --cov-report=html
    
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: code/coverage.xml
        flags: unittests
        name: codecov-umbrella

  docker-security:
    runs-on: ubuntu-latest
    name: Docker Security Scan
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Build Docker image
      run: |
        cd code
        docker build -t simone-mcp-server:test .
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: simone-mcp-server:test
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'
    
    - name: Docker image security best practices check
      run: |
        cd code
        docker run --rm -v /var/run/docker.sock:/var/run/docker.sock \
          -v $PWD:/code \
          replicated/dockerfilelint /code/Dockerfile

  configuration-security:
    runs-on: ubuntu-latest
    name: Configuration Security Review
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Check for hardcoded secrets
      run: |
        # Check for potential hardcoded secrets
        if grep -r "password.*=" code/ --exclude-dir=.git --exclude="*.example" --exclude="*.md"; then
          echo "Warning: Potential hardcoded passwords found"
          exit 1
        fi
        
        if grep -r "secret.*=" code/ --exclude-dir=.git --exclude="*.example" --exclude="*.md"; then
          echo "Warning: Potential hardcoded secrets found"
          exit 1
        fi
        
        if grep -r "key.*=" code/ --exclude-dir=.git --exclude="*.example" --exclude="*.md" | grep -v "X-API-Key"; then
          echo "Warning: Potential hardcoded API keys found"
          exit 1
        fi
    
    - name: Validate Docker Compose security
      run: |
        cd code
        # Check for security issues in docker-compose files
        if grep -E "privileged.*true|security_opt.*apparmor:unconfined" docker-compose*.yml; then
          echo "Error: Insecure Docker Compose configuration found"
          exit 1
        fi
    
    - name: Check environment file templates
      run: |
        cd code
        # Ensure .env files are not committed (only templates)
        if [[ -f .env ]]; then
          echo "Error: .env file should not be committed to repository"
          exit 1
        fi
        
        # Ensure example files exist
        if [[ ! -f .env.production.example ]]; then
          echo "Error: .env.production.example template missing"
          exit 1
        fi