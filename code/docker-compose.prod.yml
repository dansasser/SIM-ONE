# Production Docker Compose Configuration  
# For production deployment of the SIM-ONE MCP Server

version: '3.8'

services:
  # Redis Cluster for production session management
  redis-master:
    image: redis:7-alpine
    container_name: simone-redis-master
    restart: always
    ports:
      - "6379:6379"
    environment:
      - REDIS_REPLICATION_MODE=master
    volumes:
      - redis-master-data:/data
      - ./config/redis-master.conf:/usr/local/etc/redis/redis.conf
    command: ["redis-server", "/usr/local/etc/redis/redis.conf"]
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - simone-network

  redis-replica:
    image: redis:7-alpine
    container_name: simone-redis-replica
    restart: always
    environment:
      - REDIS_REPLICATION_MODE=slave
      - REDIS_MASTER_HOST=redis-master
    volumes:
      - redis-replica-data:/data
      - ./config/redis-replica.conf:/usr/local/etc/redis/redis.conf
    command: ["redis-server", "/usr/local/etc/redis/redis.conf"]
    depends_on:
      - redis-master
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - simone-network

  # MCP Server applications (multiple instances for load balancing)
  mcp-server-1:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
      args:
        BUILD_DATE: ${BUILD_DATE}
        VERSION: ${VERSION:-1.5.0}
        VCS_REF: ${VCS_REF}
    container_name: simone-mcp-server-1
    restart: always
    expose:
      - "8000"
    environment:
      # Application configuration
      - APP_VERSION=${VERSION:-1.5.0}
      - REDIS_HOST=redis-master
      - REDIS_PORT=6379
      - NEURAL_ENGINE_BACKEND=${NEURAL_ENGINE_BACKEND:-openai}
      
      # Security configuration
      - ALLOWED_ORIGINS=${ALLOWED_ORIGINS}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      
      # API Keys (from secrets management)
      - VALID_API_KEYS=${VALID_API_KEYS}
      
      # External service keys
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - SERPER_API_KEY=${SERPER_API_KEY}
    volumes:
      - ./logs:/app/logs
      - ./data:/app/data
    depends_on:
      redis-master:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    networks:
      - simone-network

  mcp-server-2:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
      args:
        BUILD_DATE: ${BUILD_DATE}
        VERSION: ${VERSION:-1.5.0}
        VCS_REF: ${VCS_REF}
    container_name: simone-mcp-server-2
    restart: always
    expose:
      - "8000"
    environment:
      # Same environment as mcp-server-1
      - APP_VERSION=${VERSION:-1.5.0}
      - REDIS_HOST=redis-master
      - REDIS_PORT=6379
      - NEURAL_ENGINE_BACKEND=${NEURAL_ENGINE_BACKEND:-openai}
      - ALLOWED_ORIGINS=${ALLOWED_ORIGINS}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - VALID_API_KEYS=${VALID_API_KEYS}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - SERPER_API_KEY=${SERPER_API_KEY}
    volumes:
      - ./logs:/app/logs
      - ./data:/app/data
    depends_on:
      redis-master:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    networks:
      - simone-network

  # Nginx Load Balancer
  nginx:
    image: nginx:alpine
    container_name: simone-nginx
    restart: always
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./config/nginx.conf:/etc/nginx/nginx.conf
      - ./config/ssl:/etc/nginx/ssl
      - ./logs/nginx:/var/log/nginx
    depends_on:
      - mcp-server-1
      - mcp-server-2
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - simone-network

  # Optional: Monitoring and metrics
  prometheus:
    image: prom/prometheus:latest
    container_name: simone-prometheus
    restart: always
    ports:
      - "9090:9090"
    volumes:
      - ./config/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
    networks:
      - simone-network

  grafana:
    image: grafana/grafana:latest
    container_name: simone-grafana
    restart: always
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
    volumes:
      - grafana-data:/var/lib/grafana
      - ./config/grafana/provisioning:/etc/grafana/provisioning
    networks:
      - simone-network

volumes:
  redis-master-data:
    driver: local
  redis-replica-data:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local

networks:
  simone-network:
    driver: bridge
    name: simone-production-network